---
name: Fossa

on:
  workflow_call:
    inputs:
      github-app-id:
        required: false
        type: string
      org:
        required: false
        type: string
      ref:
        default: ''
        required: false
        type: string
      repository:
        required: true
        type: string
    secrets:
      fossa-api-key:
        required: true
      github-private-key:
        required: false
      token:
        required: false

env:
  FOSSA_TELEMETRY_SCOPE: off

jobs:
  fossa-analyze:
    runs-on: ubuntu-latest
    steps:
      - name: Generate GitHub API token for reading
        id: generate_reader_token
        if: ${{ inputs.github-app-id != '' }}
        uses: Updater/action-github-app-authenticate@v2
        with:
          app-id: ${{ inputs.github-app-id }}
          private-key: ${{ secrets.github-private-key }}
          org: ${{ inputs.org }}

      - uses: actions/checkout@v3
        continue-on-error: true
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.ref }}
          token: ${{ secrets.token || steps.generate_reader_token.outputs.token }}

      - name: Install fossa-cli
        continue-on-error: true
        run: |
          curl -H 'Cache-Control: no-cache' https://raw.githubusercontent.com/fossas/fossa-cli/master/install-latest.sh | bash

          echo '### Fossa CLI version' >> $GITHUB_STEP_SUMMARY
          fossa --version >> $GITHUB_STEP_SUMMARY

      - name: Generate .fossa.yml
        continue-on-error: true
        env:
          GH_TOKEN: ${{ secrets.token || steps.generate_reader_token.outputs.token }}
          REPO: ${{ inputs.repository }}
        run: |
          REPO_OWNER=$(echo "${REPO%/*}" | tr '[:upper:]' '[:lower:]')
          REPO_NAME=$(echo "${REPO#*/}" | tr '[:upper:]' '[:lower:]')
          TOPICS=$(gh repo view --json repositoryTopics --jq '.repositoryTopics')

          if [[ ${TOPICS} =~ "hsc" ]]; then
            FOSSA_TEAM="HomeSafe Connect New"
          elif [[ ${REPO_OWNER} == "dollyinc" ]]; then
            FOSSA_TEAM="Dolly"
          elif [[ ${REPO_OWNER} == "movehq" ]]; then
            FOSSA_TEAM="MoveHQ New"
          elif [[ ${REPO_OWNER} == "updater" ]]; then
            FOSSA_TEAM="Home Platform"
          fi

          case ${REPO_NAME} in
            "consumer-native-app" | "dollyandroid" | "dollyios" | "dollyios-cert-repo")
              FOSSA_POLICY="96923"
              ;;
            *)
              FOSSA_POLICY="72455"
              ;;
          esac

          if [[ ! -e .fossa.yml ]]; then
            echo "{}" >> .fossa.yml
          fi

          yq -i ".version |= 3" .fossa.yml
          yq -i ".project.id |= \"github.com/${REPO}\"" .fossa.yml
          yq -i ".project.name |= \"${REPO_NAME}\"" .fossa.yml
          yq -i ".project.policyId |= ${FOSSA_POLICY}" .fossa.yml
          yq -i ".project.team |= \"${FOSSA_TEAM}\"" .fossa.yml
          yq -i ".project.url |= \"https://github.com/${REPO}\"" .fossa.yml

          echo '### Updated `.fossa.yml`' >> $GITHUB_STEP_SUMMARY
          echo '```yaml' >> $GITHUB_STEP_SUMMARY
          cat .fossa.yml >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: List targets
        id: list-targets
        continue-on-error: true
        env:
          FOSSA_API_KEY: ${{ secrets.fossa-api-key }}
        run: |
          echo '### Targets' >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          TARGETS=$(fossa list-targets 2>&1)
          echo $TARGETS | tee >(grep -v '\[ ' >> $GITHUB_STEP_SUMMARY)
          TARGETS_COUNT=$(echo $TARGETS | grep 'Found target' | wc -l)
          echo "targets_count=${TARGETS_COUNT}" >> "$GITHUB_OUTPUT"
          echo '```' >> $GITHUB_STEP_SUMMARY

          
      - name: Analyze
        env:
          FOSSA_API_KEY: ${{ secrets.fossa-api-key }}
        if: ${{ fromJSON(steps.list-targets.outputs.targets_count) > 0 }}
        run: |
          fossa analyze

      - name: FOSSA test & Capture
        continue-on-error: true
        env:
          FOSSA_API_KEY: ${{ secrets.fossa-api-key }}
        if: ${{ fromJSON(steps.list-targets.outputs.targets_count) > 0 }}
        run: |
          fossa test --format text-pretty > fossa-output.txt 2>&1

      - name: Check for Errors
        if: ${{ fromJSON(steps.list-targets.outputs.targets_count) > 0 }}
        run: |
          if [[ -s fossa-output.txt ]]; then
            # File is not empty, meaning there was some output which might be an error
            echo "FOSSA Test Output (Possible Error):"
            cat fossa-output.txt
            echo '# FOSSA Report' > report.md
            echo '```' >> report.md
            cat fossa-output.txt >> report.md
            echo '```' >> report.md
            # echo "::error ::FOSSA test failed or reported issues. See above output for details."
            # exit 1
          fi

      - name: Set Step Summary
        if: ${{ fromJSON(steps.list-targets.outputs.targets_count) > 0 }}
        run: cat report.md > $GITHUB_STEP_SUMMARY
